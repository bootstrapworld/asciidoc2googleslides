"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _extract_slides = _interopRequireDefault(require("./parser/extract_slides"));

var _match_layout = _interopRequireDefault(require("./layout/match_layout"));

var _url = require("url");

var _googleapis = require("googleapis");

var _upload = _interopRequireDefault(require("./images/upload"));

var _probe = _interopRequireDefault(require("./images/probe"));

var _generate = _interopRequireDefault(require("./images/generate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug.default)('md2gslides');
/**
 * Generates slides from Markdown or HTML. Requires an authorized
 * oauth2 client.
 *
 * @example
 *
 *   var SlideGenerator = require('md2slides');
 *   var fs = require('fs');
 *
 *   var oauth2Client = ...; // See Google API client for details
 *   var generator = SlideGenerator.newPresentation(oauth2Client);
 *   var markdown = fs.readFileSync('mydeck.md');
 *   generator.generateFromMarkdown(markdown).then(function(id) {
 *     console.log("Presentation ID: " + id);
 *   });
 *
 * @see https://github.com/google/google-api-nodejs-client
 */

class SlideGenerator {
  /**
   * @param {Object} api Authorized API client instance
   * @param {Object} presentation Initial presentation data
   * @private
   */
  constructor(api, presentation) {
    _defineProperty(this, "slides", void 0);

    _defineProperty(this, "api", void 0);

    _defineProperty(this, "presentation", void 0);

    _defineProperty(this, "allowUpload", false);

    this.api = api;
    this.presentation = presentation;
  }
  /**
   * Returns a generator that writes to a new blank presentation.
   *
   * @param {OAuth2Client} oauth2Client User credentials
   * @param {string} title Title of presentation
   * @returns {Promise.<SlideGenerator>}
   */


  static async newPresentation(oauth2Client, title) {
    let api = _googleapis.google.slides({
      version: 'v1',
      auth: oauth2Client
    });

    let res = await api.presentations.create({
      requestBody: {
        title: title
      }
    });
    let presentation = res.data;
    return new SlideGenerator(api, presentation);
  }
  /**
   * Returns a generator that copies an existing presentation.
   *
   * @param {OAuth2Client} oauth2Client User credentials
   * @param {string} title Title of presentation
   * @param {string} presentationId ID of presentation to copy
   * @returns {Promise.<SlideGenerator>}
   */


  static async copyPresentation(oauth2Client, title, presentationId) {
    let drive = _googleapis.google.drive({
      version: 'v3',
      auth: oauth2Client
    });

    let res = await drive.files.copy({
      fileId: presentationId,
      requestBody: {
        name: title
      }
    });
    return SlideGenerator.forPresentation(oauth2Client, res.data.id);
  }
  /**
   * Returns a generator that writes to an existing presentation.
   *
   * @param {gOAuth2Client} oauth2Client User credentials
   * @param {string} presentationId ID of presentation to use
   * @returns {Promise.<SlideGenerator>}
   */


  static async forPresentation(oauth2Client, presentationId) {
    let api = _googleapis.google.slides({
      version: 'v1',
      auth: oauth2Client
    });

    let res = await api.presentations.get({
      presentationId: presentationId
    });
    let presentation = res.data;
    return new SlideGenerator(api, presentation);
  }
  /**
   * Generate slides from markdown
   *
   * @param {String} markdown Markdown to import
   * @returns {Promise.<String>} ID of generated slide
   */


  async generateFromMarkdown(markdown, {
    css,
    useFileio
  }) {
    this.slides = (0, _extract_slides.default)(markdown, css);
    this.allowUpload = useFileio;
    await this.generateImages();
    await this.probeImageSizes();
    await this.uploadLocalImages();
    await this.updatePresentation(this.createSlides());
    await this.reloadPresentation();
    await this.updatePresentation(this.populateSlides());
    return this.presentation.presentationId;
  }
  /**
   * Removes any existing slides from the presentation.
   *
   * @returns {Promise.<*>}
   */


  async erase() {
    debug('Erasing previous slides');

    if (this.presentation.slides == null) {
      return Promise.resolve(null);
    }

    let requests = this.presentation.slides.map(slide => ({
      deleteObject: {
        objectId: slide.objectId
      }
    }));
    const batch = {
      requests
    };
    await this.api.presentations.batchUpdate({
      presentationId: this.presentation.presentationId,
      requestBody: batch
    });
  }

  async processImages(fn) {
    const promises = [];

    for (let slide of this.slides) {
      if (slide.backgroundImage) {
        promises.push(fn(slide.backgroundImage));
      }

      for (let body of slide.bodies) {
        for (let image of body.images) {
          promises.push(fn(image));
        }
      }
    }

    await Promise.all(promises);
  }

  async generateImages() {
    return this.processImages(_generate.default);
  }

  async uploadLocalImages() {
    const uploadImageifLocal = async image => {
      let parsedUrl = new _url.URL(image.url);

      if (parsedUrl.protocol !== 'file:') {
        return;
      }

      if (!this.allowUpload) {
        return Promise.reject('Local images require --use-fileio option');
      }

      image.url = await (0, _upload.default)(parsedUrl.pathname);
    };

    return this.processImages(uploadImageifLocal);
  }
  /**
   * Fetches the image sizes for each image in the presentation. Allows
   * for more accurate layout of images.
   *
   * Image sizes are stored as data attributes on the image elements.
   *
   * @returns {Promise.<*>}
   * @private
   */


  async probeImageSizes() {
    return this.processImages(_probe.default);
  }
  /**
   * 1st pass at generation -- creates slides using the apporpriate
   * layout based on the content.
   *
   * Note this only returns the batch requests, but does not execute it.
   *
   * @returns {{requests: Array}}
   */


  createSlides() {
    debug('Creating slides');
    const batch = {
      requests: []
    };

    for (let slide of this.slides) {
      const layout = (0, _match_layout.default)(this.presentation, slide);
      layout.appendCreateSlideRequest(batch.requests);
    }

    return batch;
  }
  /**
   * 2nd pass at generation -- fills in placeholders and adds any other
   * elements to the slides.
   *
   * Note this only returns the batch requests, but does not execute it.
   *
   * @returns {{requests: Array}}
   */


  populateSlides() {
    debug('Populating slides');
    const batch = {
      requests: []
    };

    for (let slide of this.slides) {
      const layout = (0, _match_layout.default)(this.presentation, slide);
      layout.appendContentRequests(batch.requests);
    }

    return batch;
  }
  /**
   * Updates the remote presentation.
   *
   * @param batch Batch of operations to execute
   * @returns {Promise.<*>}
   */


  async updatePresentation(batch) {
    debug('Updating presentation: %O', batch);

    if (batch.requests.length == 0) {
      return Promise.resolve(null);
    }

    let res = await this.api.presentations.batchUpdate({
      presentationId: this.presentation.presentationId,
      requestBody: batch
    });
    debug('API response: %O', res.data);
  }
  /**
   * Refreshes the local copy of the presentation.
   *
   * @returns {Promise.<*>}
   */


  async reloadPresentation() {
    let res = await this.api.presentations.get({
      presentationId: this.presentation.presentationId
    });
    this.presentation = res.data;
  }

}

exports.default = SlideGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=slide_generator.js.map