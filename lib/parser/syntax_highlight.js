"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lowlight = _interopRequireDefault(require("lowlight"));

var _css = require("./css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2019 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const hastRules = {}; // Type guard
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function isTextNode(node) {
  return node.value != undefined;
} // Type guard
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function isElementNode(node) {
  return node.properties != undefined;
}

function processHastNode(node, context) {
  if (node.type !== 'text' && node.type !== 'element') {
    return;
  }

  let ruleName = node.type === 'text' ? 'text' : node.tagName;
  let fn = hastRules[ruleName];

  if (!fn) {
    return;
  }

  fn(node, context);
}

function extractStyle(node, cssRules) {
  if (!isElementNode(node)) {
    return;
  }

  const classNames = node.properties['className'];
  let style = {};

  for (let cls of classNames || []) {
    const normalizedClassName = cls.replace(/-/g, '_');
    const rule = cssRules[normalizedClassName];

    if (rule) {
      style = (0, _css.updateStyleDefinition)(rule, style);
    }
  }

  return style;
}

hastRules['text'] = (node, context) => {
  if (!isTextNode(node)) {
    return;
  } // For code blocks, replace line feeds with vertical tabs to keep
  // the block as a single paragraph. This avoid the extra vertical
  // space that appears between paragraphs


  context.appendText(node.value.replace(/\n/g, '\u000b'));
};

hastRules['span'] = (node, context) => {
  if (!isElementNode(node)) {
    return;
  }

  let style = extractStyle(node, context.css);
  context.startStyle(style);

  for (let childNode of node.children || []) {
    processHastNode(childNode, context);
  }

  context.endStyle();
};

function highlightSyntax(content, language, context) {
  const highlightResult = _lowlight.default.highlight(language, content);

  for (let node of highlightResult.value) {
    processHastNode(node, context);
  }
}

var _default = highlightSyntax;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvc3ludGF4X2hpZ2hsaWdodC50cyJdLCJuYW1lcyI6WyJoYXN0UnVsZXMiLCJpc1RleHROb2RlIiwibm9kZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiaXNFbGVtZW50Tm9kZSIsInByb3BlcnRpZXMiLCJwcm9jZXNzSGFzdE5vZGUiLCJjb250ZXh0IiwidHlwZSIsInJ1bGVOYW1lIiwidGFnTmFtZSIsImZuIiwiZXh0cmFjdFN0eWxlIiwiY3NzUnVsZXMiLCJjbGFzc05hbWVzIiwic3R5bGUiLCJjbHMiLCJub3JtYWxpemVkQ2xhc3NOYW1lIiwicmVwbGFjZSIsInJ1bGUiLCJhcHBlbmRUZXh0IiwiY3NzIiwic3RhcnRTdHlsZSIsImNoaWxkTm9kZSIsImNoaWxkcmVuIiwiZW5kU3R5bGUiLCJoaWdobGlnaHRTeW50YXgiLCJjb250ZW50IiwibGFuZ3VhZ2UiLCJoaWdobGlnaHRSZXN1bHQiLCJsb3ciLCJoaWdobGlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFjQTs7QUFFQTs7OztBQWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBLE1BQU1BLFNBQWdCLEdBQUcsRUFBekIsQyxDQUVBO0FBQ0E7O0FBQ0EsU0FBU0MsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEQ7QUFDdEQsU0FBT0EsSUFBSSxDQUFDQyxLQUFMLElBQWNDLFNBQXJCO0FBQ0gsQyxDQUVEO0FBQ0E7OztBQUNBLFNBQVNDLGFBQVQsQ0FBdUJILElBQXZCLEVBQWdFO0FBQzVELFNBQU9BLElBQUksQ0FBQ0ksVUFBTCxJQUFtQkYsU0FBMUI7QUFDSDs7QUFFRCxTQUFTRyxlQUFULENBQXlCTCxJQUF6QixFQUFrRE0sT0FBbEQsRUFBMEU7QUFDdEUsTUFBSU4sSUFBSSxDQUFDTyxJQUFMLEtBQWMsTUFBZCxJQUF3QlAsSUFBSSxDQUFDTyxJQUFMLEtBQWMsU0FBMUMsRUFBcUQ7QUFDakQ7QUFDSDs7QUFDRCxNQUFJQyxRQUFRLEdBQUdSLElBQUksQ0FBQ08sSUFBTCxLQUFjLE1BQWQsR0FBdUIsTUFBdkIsR0FBZ0NQLElBQUksQ0FBQ1MsT0FBcEQ7QUFDQSxNQUFJQyxFQUFFLEdBQUdaLFNBQVMsQ0FBQ1UsUUFBRCxDQUFsQjs7QUFDQSxNQUFJLENBQUNFLEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBQ0RBLEVBQUFBLEVBQUUsQ0FBQ1YsSUFBRCxFQUFPTSxPQUFQLENBQUY7QUFDSDs7QUFFRCxTQUFTSyxZQUFULENBQXNCWCxJQUF0QixFQUErQ1ksUUFBL0MsRUFBa0Y7QUFDOUUsTUFBSSxDQUFDVCxhQUFhLENBQUNILElBQUQsQ0FBbEIsRUFBMEI7QUFDdEI7QUFDSDs7QUFDRCxRQUFNYSxVQUFVLEdBQUdiLElBQUksQ0FBQ0ksVUFBTCxDQUFnQixXQUFoQixDQUFuQjtBQUNBLE1BQUlVLEtBQUssR0FBRyxFQUFaOztBQUNBLE9BQUssSUFBSUMsR0FBVCxJQUFnQkYsVUFBVSxJQUFJLEVBQTlCLEVBQWtDO0FBQzlCLFVBQU1HLG1CQUFtQixHQUFHRCxHQUFHLENBQUNFLE9BQUosQ0FBWSxJQUFaLEVBQWtCLEdBQWxCLENBQTVCO0FBQ0EsVUFBTUMsSUFBSSxHQUFHTixRQUFRLENBQUNJLG1CQUFELENBQXJCOztBQUNBLFFBQUlFLElBQUosRUFBVTtBQUNOSixNQUFBQSxLQUFLLEdBQUcsZ0NBQXNCSSxJQUF0QixFQUE0QkosS0FBNUIsQ0FBUjtBQUNIO0FBQ0o7O0FBQ0QsU0FBT0EsS0FBUDtBQUNIOztBQUVEaEIsU0FBUyxDQUFDLE1BQUQsQ0FBVCxHQUFvQixDQUFDRSxJQUFELEVBQU9NLE9BQVAsS0FBbUI7QUFDbkMsTUFBSSxDQUFDUCxVQUFVLENBQUNDLElBQUQsQ0FBZixFQUF1QjtBQUNuQjtBQUNILEdBSGtDLENBSW5DO0FBQ0E7QUFDQTs7O0FBQ0FNLEVBQUFBLE9BQU8sQ0FBQ2EsVUFBUixDQUFtQm5CLElBQUksQ0FBQ0MsS0FBTCxDQUFXZ0IsT0FBWCxDQUFtQixLQUFuQixFQUEwQixRQUExQixDQUFuQjtBQUNILENBUkQ7O0FBVUFuQixTQUFTLENBQUMsTUFBRCxDQUFULEdBQW9CLENBQUNFLElBQUQsRUFBT00sT0FBUCxLQUFtQjtBQUNuQyxNQUFJLENBQUNILGFBQWEsQ0FBQ0gsSUFBRCxDQUFsQixFQUEwQjtBQUN0QjtBQUNIOztBQUNELE1BQUljLEtBQUssR0FBR0gsWUFBWSxDQUFDWCxJQUFELEVBQU9NLE9BQU8sQ0FBQ2MsR0FBZixDQUF4QjtBQUNBZCxFQUFBQSxPQUFPLENBQUNlLFVBQVIsQ0FBbUJQLEtBQW5COztBQUNBLE9BQUssSUFBSVEsU0FBVCxJQUFzQnRCLElBQUksQ0FBQ3VCLFFBQUwsSUFBaUIsRUFBdkMsRUFBMkM7QUFDdkNsQixJQUFBQSxlQUFlLENBQUNpQixTQUFELEVBQWlDaEIsT0FBakMsQ0FBZjtBQUNIOztBQUNEQSxFQUFBQSxPQUFPLENBQUNrQixRQUFSO0FBQ0gsQ0FWRDs7QUFZQSxTQUFTQyxlQUFULENBQXlCQyxPQUF6QixFQUEwQ0MsUUFBMUMsRUFBNERyQixPQUE1RCxFQUFvRjtBQUNoRixRQUFNc0IsZUFBZSxHQUFHQyxrQkFBSUMsU0FBSixDQUFjSCxRQUFkLEVBQXdCRCxPQUF4QixDQUF4Qjs7QUFDQSxPQUFLLElBQUkxQixJQUFULElBQWlCNEIsZUFBZSxDQUFDM0IsS0FBakMsRUFBd0M7QUFDcENJLElBQUFBLGVBQWUsQ0FBQ0wsSUFBRCxFQUFPTSxPQUFQLENBQWY7QUFDSDtBQUNKOztlQUVjbUIsZSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCBsb3cgZnJvbSAnbG93bGlnaHQnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4vZW52JztcbmltcG9ydCB7IHVwZGF0ZVN0eWxlRGVmaW5pdGlvbiB9IGZyb20gJy4vY3NzJztcbmltcG9ydCB7IFN0eWxlRGVmaW5pdGlvbiB9IGZyb20gJy4uL3NsaWRlcyc7XG5cbnR5cGUgUnVsZUZuID0gKG5vZGU6IGxvd2xpZ2h0Lkhhc3ROb2RlLCBjb250ZXh0OiBDb250ZXh0KSA9PiB2b2lkO1xuaW50ZXJmYWNlIFJ1bGVzIHtcbiAgICBba2V5OiBzdHJpbmddOiBSdWxlRm47XG59XG5cbmNvbnN0IGhhc3RSdWxlczogUnVsZXMgPSB7fTtcblxuLy8gVHlwZSBndWFyZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGlzVGV4dE5vZGUobm9kZTogYW55KTogbm9kZSBpcyBsb3dsaWdodC5BU1QuVGV4dCB7XG4gICAgcmV0dXJuIG5vZGUudmFsdWUgIT0gdW5kZWZpbmVkO1xufVxuXG4vLyBUeXBlIGd1YXJkXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gaXNFbGVtZW50Tm9kZShub2RlOiBhbnkpOiBub2RlIGlzIGxvd2xpZ2h0LkFTVC5FbGVtZW50IHtcbiAgICByZXR1cm4gbm9kZS5wcm9wZXJ0aWVzICE9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0hhc3ROb2RlKG5vZGU6IGxvd2xpZ2h0Lkhhc3ROb2RlLCBjb250ZXh0OiBDb250ZXh0KTogdm9pZCB7XG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ3RleHQnICYmIG5vZGUudHlwZSAhPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJ1bGVOYW1lID0gbm9kZS50eXBlID09PSAndGV4dCcgPyAndGV4dCcgOiBub2RlLnRhZ05hbWU7XG4gICAgbGV0IGZuID0gaGFzdFJ1bGVzW3J1bGVOYW1lXTtcbiAgICBpZiAoIWZuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm4obm9kZSwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTdHlsZShub2RlOiBsb3dsaWdodC5IYXN0Tm9kZSwgY3NzUnVsZXM6IG9iamVjdCk6IFN0eWxlRGVmaW5pdGlvbiB7XG4gICAgaWYgKCFpc0VsZW1lbnROb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IG5vZGUucHJvcGVydGllc1snY2xhc3NOYW1lJ107XG4gICAgbGV0IHN0eWxlID0ge307XG4gICAgZm9yIChsZXQgY2xzIG9mIGNsYXNzTmFtZXMgfHwgW10pIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZENsYXNzTmFtZSA9IGNscy5yZXBsYWNlKC8tL2csICdfJyk7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSBjc3NSdWxlc1tub3JtYWxpemVkQ2xhc3NOYW1lXTtcbiAgICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgICAgIHN0eWxlID0gdXBkYXRlU3R5bGVEZWZpbml0aW9uKHJ1bGUsIHN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5cbmhhc3RSdWxlc1sndGV4dCddID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgICBpZiAoIWlzVGV4dE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBGb3IgY29kZSBibG9ja3MsIHJlcGxhY2UgbGluZSBmZWVkcyB3aXRoIHZlcnRpY2FsIHRhYnMgdG8ga2VlcFxuICAgIC8vIHRoZSBibG9jayBhcyBhIHNpbmdsZSBwYXJhZ3JhcGguIFRoaXMgYXZvaWQgdGhlIGV4dHJhIHZlcnRpY2FsXG4gICAgLy8gc3BhY2UgdGhhdCBhcHBlYXJzIGJldHdlZW4gcGFyYWdyYXBoc1xuICAgIGNvbnRleHQuYXBwZW5kVGV4dChub2RlLnZhbHVlLnJlcGxhY2UoL1xcbi9nLCAnXFx1MDAwYicpKTtcbn07XG5cbmhhc3RSdWxlc1snc3BhbiddID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgICBpZiAoIWlzRWxlbWVudE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3R5bGUgPSBleHRyYWN0U3R5bGUobm9kZSwgY29udGV4dC5jc3MpO1xuICAgIGNvbnRleHQuc3RhcnRTdHlsZShzdHlsZSk7XG4gICAgZm9yIChsZXQgY2hpbGROb2RlIG9mIG5vZGUuY2hpbGRyZW4gfHwgW10pIHtcbiAgICAgICAgcHJvY2Vzc0hhc3ROb2RlKGNoaWxkTm9kZSBhcyBsb3dsaWdodC5IYXN0Tm9kZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnRleHQuZW5kU3R5bGUoKTtcbn07XG5cbmZ1bmN0aW9uIGhpZ2hsaWdodFN5bnRheChjb250ZW50OiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcsIGNvbnRleHQ6IENvbnRleHQpOiB2b2lkIHtcbiAgICBjb25zdCBoaWdobGlnaHRSZXN1bHQgPSBsb3cuaGlnaGxpZ2h0KGxhbmd1YWdlLCBjb250ZW50KTtcbiAgICBmb3IgKGxldCBub2RlIG9mIGhpZ2hsaWdodFJlc3VsdC52YWx1ZSkge1xuICAgICAgICBwcm9jZXNzSGFzdE5vZGUobm9kZSwgY29udGV4dCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoaWdobGlnaHRTeW50YXg7XG4iXX0=
//# sourceMappingURL=syntax_highlight.js.map