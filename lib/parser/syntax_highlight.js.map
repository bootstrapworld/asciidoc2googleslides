{"version":3,"sources":["../../src/parser/syntax_highlight.ts"],"names":["hastRules","isTextNode","node","value","undefined","isElementNode","properties","processHastNode","context","type","ruleName","tagName","fn","extractStyle","cssRules","classNames","style","cls","normalizedClassName","replace","rule","appendText","css","startStyle","childNode","children","endStyle","highlightSyntax","content","language","highlightResult","low","highlight"],"mappings":";;;;;;;AAcA;;AAEA;;;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA,MAAMA,SAAgB,GAAG,EAAzB,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0D;AACtD,SAAOA,IAAI,CAACC,KAAL,IAAcC,SAArB;AACH,C,CAED;AACA;;;AACA,SAASC,aAAT,CAAuBH,IAAvB,EAAgE;AAC5D,SAAOA,IAAI,CAACI,UAAL,IAAmBF,SAA1B;AACH;;AAED,SAASG,eAAT,CAAyBL,IAAzB,EAAkDM,OAAlD,EAA0E;AACtE,MAAIN,IAAI,CAACO,IAAL,KAAc,MAAd,IAAwBP,IAAI,CAACO,IAAL,KAAc,SAA1C,EAAqD;AACjD;AACH;;AACD,MAAIC,QAAQ,GAAGR,IAAI,CAACO,IAAL,KAAc,MAAd,GAAuB,MAAvB,GAAgCP,IAAI,CAACS,OAApD;AACA,MAAIC,EAAE,GAAGZ,SAAS,CAACU,QAAD,CAAlB;;AACA,MAAI,CAACE,EAAL,EAAS;AACL;AACH;;AACDA,EAAAA,EAAE,CAACV,IAAD,EAAOM,OAAP,CAAF;AACH;;AAED,SAASK,YAAT,CAAsBX,IAAtB,EAA+CY,QAA/C,EAAkF;AAC9E,MAAI,CAACT,aAAa,CAACH,IAAD,CAAlB,EAA0B;AACtB;AACH;;AACD,QAAMa,UAAU,GAAGb,IAAI,CAACI,UAAL,CAAgB,WAAhB,CAAnB;AACA,MAAIU,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,GAAT,IAAgBF,UAAU,IAAI,EAA9B,EAAkC;AAC9B,UAAMG,mBAAmB,GAAGD,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAA5B;AACA,UAAMC,IAAI,GAAGN,QAAQ,CAACI,mBAAD,CAArB;;AACA,QAAIE,IAAJ,EAAU;AACNJ,MAAAA,KAAK,GAAG,gCAAsBI,IAAtB,EAA4BJ,KAA5B,CAAR;AACH;AACJ;;AACD,SAAOA,KAAP;AACH;;AAEDhB,SAAS,CAAC,MAAD,CAAT,GAAoB,CAACE,IAAD,EAAOM,OAAP,KAAmB;AACnC,MAAI,CAACP,UAAU,CAACC,IAAD,CAAf,EAAuB;AACnB;AACH,GAHkC,CAInC;AACA;AACA;;;AACAM,EAAAA,OAAO,CAACa,UAAR,CAAmBnB,IAAI,CAACC,KAAL,CAAWgB,OAAX,CAAmB,KAAnB,EAA0B,QAA1B,CAAnB;AACH,CARD;;AAUAnB,SAAS,CAAC,MAAD,CAAT,GAAoB,CAACE,IAAD,EAAOM,OAAP,KAAmB;AACnC,MAAI,CAACH,aAAa,CAACH,IAAD,CAAlB,EAA0B;AACtB;AACH;;AACD,MAAIc,KAAK,GAAGH,YAAY,CAACX,IAAD,EAAOM,OAAO,CAACc,GAAf,CAAxB;AACAd,EAAAA,OAAO,CAACe,UAAR,CAAmBP,KAAnB;;AACA,OAAK,IAAIQ,SAAT,IAAsBtB,IAAI,CAACuB,QAAL,IAAiB,EAAvC,EAA2C;AACvClB,IAAAA,eAAe,CAACiB,SAAD,EAAiChB,OAAjC,CAAf;AACH;;AACDA,EAAAA,OAAO,CAACkB,QAAR;AACH,CAVD;;AAYA,SAASC,eAAT,CAAyBC,OAAzB,EAA0CC,QAA1C,EAA4DrB,OAA5D,EAAoF;AAChF,QAAMsB,eAAe,GAAGC,kBAAIC,SAAJ,CAAcH,QAAd,EAAwBD,OAAxB,CAAxB;;AACA,OAAK,IAAI1B,IAAT,IAAiB4B,eAAe,CAAC3B,KAAjC,EAAwC;AACpCI,IAAAA,eAAe,CAACL,IAAD,EAAOM,OAAP,CAAf;AACH;AACJ;;eAEcmB,e","sourcesContent":["// Copyright 2019 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport low from 'lowlight';\nimport { Context } from './env';\nimport { updateStyleDefinition } from './css';\nimport { StyleDefinition } from '../slides';\n\ntype RuleFn = (node: lowlight.HastNode, context: Context) => void;\ninterface Rules {\n    [key: string]: RuleFn;\n}\n\nconst hastRules: Rules = {};\n\n// Type guard\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isTextNode(node: any): node is lowlight.AST.Text {\n    return node.value != undefined;\n}\n\n// Type guard\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isElementNode(node: any): node is lowlight.AST.Element {\n    return node.properties != undefined;\n}\n\nfunction processHastNode(node: lowlight.HastNode, context: Context): void {\n    if (node.type !== 'text' && node.type !== 'element') {\n        return;\n    }\n    let ruleName = node.type === 'text' ? 'text' : node.tagName;\n    let fn = hastRules[ruleName];\n    if (!fn) {\n        return;\n    }\n    fn(node, context);\n}\n\nfunction extractStyle(node: lowlight.HastNode, cssRules: object): StyleDefinition {\n    if (!isElementNode(node)) {\n        return;\n    }\n    const classNames = node.properties['className'];\n    let style = {};\n    for (let cls of classNames || []) {\n        const normalizedClassName = cls.replace(/-/g, '_');\n        const rule = cssRules[normalizedClassName];\n        if (rule) {\n            style = updateStyleDefinition(rule, style);\n        }\n    }\n    return style;\n}\n\nhastRules['text'] = (node, context) => {\n    if (!isTextNode(node)) {\n        return;\n    }\n    // For code blocks, replace line feeds with vertical tabs to keep\n    // the block as a single paragraph. This avoid the extra vertical\n    // space that appears between paragraphs\n    context.appendText(node.value.replace(/\\n/g, '\\u000b'));\n};\n\nhastRules['span'] = (node, context) => {\n    if (!isElementNode(node)) {\n        return;\n    }\n    let style = extractStyle(node, context.css);\n    context.startStyle(style);\n    for (let childNode of node.children || []) {\n        processHastNode(childNode as lowlight.HastNode, context);\n    }\n    context.endStyle();\n};\n\nfunction highlightSyntax(content: string, language: string, context: Context): void {\n    const highlightResult = low.highlight(language, content);\n    for (let node of highlightResult.value) {\n        processHastNode(node, context);\n    }\n}\n\nexport default highlightSyntax;\n"],"file":"syntax_highlight.js"}