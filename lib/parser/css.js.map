{"version":3,"sources":["../../src/parser/css.ts"],"names":["debug","parseColorString","hexString","c","rgba","opaqueColor","rgbColor","red","green","blue","normalizeKeys","css","normalized","_","mapKeys","value","key","camelCase","parseStyleSheet","stylesheet","nativeCSS","convert","parseInlineStyle","inlineStyle","dummyRule","inlineStylesParse","declarationsToRule","updateStyleDefinition","style","normalizedCss","Object","entries","foregroundColor","backgroundColor","bold","italic","underline","strikethrough","fontFamily","smallCaps","match","fontSize","magnitude","Number","parseInt","unit"],"mappings":";;;;;;;;;AAcA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,MAAMA,KAAK,GAAG,oBAAM,YAAN,CAAd;;AASA,SAASC,gBAAT,CAA0BC,SAA1B,EAAoD;AAChD,QAAMC,CAAC,GAAG,yBAAWD,SAAX,CAAV;;AACA,MAAI,CAACC,CAAC,CAACC,IAAP,EAAa;AACT;AACH;;AACD,SAAO;AACHC,IAAAA,WAAW,EAAE;AACTC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,GAAG,EAAEJ,CAAC,CAACC,IAAF,CAAO,CAAP,IAAY,GADX;AAENI,QAAAA,KAAK,EAAEL,CAAC,CAACC,IAAF,CAAO,CAAP,IAAY,GAFb;AAGNK,QAAAA,IAAI,EAAEN,CAAC,CAACC,IAAF,CAAO,CAAP,IAAY;AAHZ;AADD;AADV,GAAP;AASH;;AAED,SAASM,aAAT,CAAuBC,GAAvB,EAA8C;AAC1C,MAAIC,UAAU,GAAGC,CAAC,CAACC,OAAF,CAAUH,GAAV,EAAe,CAACI,KAAD,EAAQC,GAAR,KAAgBH,CAAC,CAACI,SAAF,CAAYD,GAAZ,CAA/B,CAAjB;;AACA,SAAOJ,UAAP;AACH;;AAEM,SAASM,eAAT,CAAyBC,UAAzB,EAAyD;AAC5D,SAAOC,mBAAUC,OAAV,CAAkBF,UAAlB,CAAP;AACH;;AAEM,SAASG,gBAAT,CAA0BC,WAA1B,EAAwD;AAC3D,QAAMC,SAAS,GAAGC,2BAAkBC,kBAAlB,CAAqCH,WAArC,CAAlB;;AACA,MAAIZ,GAAG,GAAGS,mBAAUC,OAAV,CAAkBG,SAAlB,CAAV;;AACA,SAAOb,GAAG,CAAC,OAAD,CAAV;AACH;;AAEM,SAASgB,qBAAT,CAA+BhB,GAA/B,EAA6CiB,KAA7C,EAAsF;AACzF,MAAIC,aAAa,GAAGnB,aAAa,CAACC,GAAD,CAAjC;;AACA,OAAK,IAAI,CAACK,GAAD,EAAMD,KAAN,CAAT,IAAyBe,MAAM,CAACC,OAAP,CAAeF,aAAf,CAAzB,EAAwD;AACpD,YAAQb,GAAR;AACI,WAAK,OAAL;AACIY,QAAAA,KAAK,CAACI,eAAN,GAAwB/B,gBAAgB,CAACc,KAAD,CAAxC;AACA;;AACJ,WAAK,iBAAL;AACIa,QAAAA,KAAK,CAACK,eAAN,GAAwBhC,gBAAgB,CAACc,KAAD,CAAxC;AACA;;AACJ,WAAK,YAAL;AACI,YAAIA,KAAK,KAAK,MAAd,EAAsB;AAClBa,UAAAA,KAAK,CAACM,IAAN,GAAa,IAAb;AACH;;AACD;;AACJ,WAAK,WAAL;AACI,YAAInB,KAAK,KAAK,QAAd,EAAwB;AACpBa,UAAAA,KAAK,CAACO,MAAN,GAAe,IAAf;AACH;;AACD;;AACJ,WAAK,WAAL;AACI,YAAIpB,KAAK,KAAK,WAAd,EAA2B;AACvBa,UAAAA,KAAK,CAACQ,SAAN,GAAkB,IAAlB;AACH,SAFD,MAEO,IAAIrB,KAAK,KAAK,cAAd,EAA8B;AACjCa,UAAAA,KAAK,CAACS,aAAN,GAAsB,IAAtB;AACH;;AACD;;AACJ,WAAK,YAAL;AACIT,QAAAA,KAAK,CAACU,UAAN,GAAmBvB,KAAnB;AACA;;AACJ,WAAK,aAAL;AACI,YAAIA,KAAK,KAAK,YAAd,EAA4B;AACxBa,UAAAA,KAAK,CAACW,SAAN,GAAkB,IAAlB;AACH;;AACD;;AACJ,WAAK,UAAL;AACI;AACA,cAAMC,KAAK,GAAIzB,KAAD,CAAkByB,KAAlB,CAAwB,cAAxB,CAAd;;AACA,YAAI,CAACA,KAAL,EAAY;AACRxC,UAAAA,KAAK,CAAC,6BAAD,EAAgCe,KAAhC,CAAL;AACA;AACH;;AACDa,QAAAA,KAAK,CAACa,QAAN,GAAiB;AACbC,UAAAA,SAAS,EAAEC,MAAM,CAACC,QAAP,CAAgBJ,KAAK,CAAC,CAAD,CAArB,CADE;AAEbK,UAAAA,IAAI,EAAE;AAFO,SAAjB;AAIA;;AACJ;AACI7C,QAAAA,KAAK,CAAC,0BAAD,EAA6BgB,GAA7B,EAAkCD,KAAlC,CAAL;AA7CR;AA+CH;;AACD,SAAOa,KAAP;AACH","sourcesContent":["// Copyright 2019 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport parseColor from 'parse-color';\nimport Debug from 'debug';\nimport inlineStylesParse from 'inline-styles-parse';\nimport nativeCSS from 'native-css';\nimport { Color, StyleDefinition } from '../slides';\nimport * as _ from 'lodash';\n\nconst debug = Debug('md2gslides');\n\nexport interface CssRule {\n    [key: string]: string;\n}\nexport interface Stylesheet {\n    [key: string]: CssRule;\n}\n\nfunction parseColorString(hexString: string): Color {\n    const c = parseColor(hexString);\n    if (!c.rgba) {\n        return;\n    }\n    return {\n        opaqueColor: {\n            rgbColor: {\n                red: c.rgba[0] / 255,\n                green: c.rgba[1] / 255,\n                blue: c.rgba[2] / 255,\n            },\n        },\n    };\n}\n\nfunction normalizeKeys(css: CssRule): CssRule {\n    let normalized = _.mapKeys(css, (value, key) => _.camelCase(key));\n    return normalized;\n}\n\nexport function parseStyleSheet(stylesheet: string): Stylesheet {\n    return nativeCSS.convert(stylesheet) as Stylesheet;\n}\n\nexport function parseInlineStyle(inlineStyle: string): CssRule {\n    const dummyRule = inlineStylesParse.declarationsToRule(inlineStyle);\n    let css = nativeCSS.convert(dummyRule);\n    return css['dummy'] as CssRule;\n}\n\nexport function updateStyleDefinition(css: CssRule, style: StyleDefinition): StyleDefinition {\n    let normalizedCss = normalizeKeys(css);\n    for (let [key, value] of Object.entries(normalizedCss)) {\n        switch (key) {\n            case 'color':\n                style.foregroundColor = parseColorString(value);\n                break;\n            case 'backgroundColor':\n                style.backgroundColor = parseColorString(value);\n                break;\n            case 'fontWeight':\n                if (value === 'bold') {\n                    style.bold = true;\n                }\n                break;\n            case 'fontStyle':\n                if (value === 'italic') {\n                    style.italic = true;\n                }\n                break;\n            case 'fontStyle':\n                if (value === 'underline') {\n                    style.underline = true;\n                } else if (value === 'line-through') {\n                    style.strikethrough = true;\n                }\n                break;\n            case 'fontFamily':\n                style.fontFamily = value;\n                break;\n            case 'fontVariant':\n                if (value === 'small-caps') {\n                    style.smallCaps = true;\n                }\n                break;\n            case 'fontSize':\n                // Font size must be expressed in points\n                const match = (value as string).match(/(\\d+)(?:pt)?/);\n                if (!match) {\n                    debug('Invalid font-size value: %s', value);\n                    return;\n                }\n                style.fontSize = {\n                    magnitude: Number.parseInt(match[1]),\n                    unit: 'PT',\n                };\n                break;\n            default:\n                debug('Ignoring CSS rule %s: %o', key, value);\n        }\n    }\n    return style;\n}\n"],"file":"css.js"}