"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _googleAuthLibrary = require("google-auth-library");

var _path = _interopRequireDefault(require("path"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _lowdb = _interopRequireDefault(require("lowdb"));

var _FileSync = _interopRequireDefault(require("lowdb/adapters/FileSync"));

var _Memory = _interopRequireDefault(require("lowdb/adapters/Memory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug.default)('md2gslides');

/**
 * Handles the authorization flow, intended for command line usage.
 *
 * @example
 *   var auth = new UserAuthorizer({
 *     clientId: 'my-client-id',
 *     clientSecret: 'my-client-secret',
 *     filePath: '/path/to/persistent/token/storage'
 *     prompt: function(url) { ... }
 *   });
 *
 *   var credentials = auth.getUserCredentials('user@example.com', 'https://www.googleapis.com/auth/slides');
 *   credentials.then(function(oauth2Client) {
 *     // Valid oauth2Client for use with google APIs.
 *   });
 *
 *   @callback UserAuthorizer-promptCallback
 *   @param {String} url Authorization URL to display to user or open in browser
 *   @returns {Promise.<String>} Promise yielding the authorization code
 */
class UserAuthorizer {
  /**
   * Initialize the authorizer.
   *
   * This may block briefly to ensure the token file exists.
   *
   * @param {String} clientId Client ID
   * @param {String} clientSecret Client secret
   * @param {String} filePath Path to file where tokens are saved
   * @param {UserAuthorizer~promptCallback} prompt Function to acquire the authorization code
   */
  constructor(options) {
    _defineProperty(this, "redirectUrl", 'urn:ietf:wg:oauth:2.0:oob');

    _defineProperty(this, "db", void 0);

    _defineProperty(this, "clientId", void 0);

    _defineProperty(this, "clientSecret", void 0);

    _defineProperty(this, "prompt", void 0);

    this.db = this.initDbSync(options.filePath);
    this.clientId = options.clientId;
    this.clientSecret = options.clientSecret;
    this.prompt = options.prompt;
  }
  /**
   * Fetch credentials for the specified user.
   *
   * If no credentials are available, requests authorization.
   *
   * @param {String} user ID (email address) of user to get credentials for.
   * @param {String} scopes Authorization scopes to request
   * @returns {Promise.<google.auth.OAuth2>}
   */


  async getUserCredentials(user, scopes) {
    const oauth2Client = new _googleAuthLibrary.OAuth2Client(this.clientId, this.clientSecret, this.redirectUrl);
    oauth2Client.on('tokens', tokens => {
      if (tokens.refresh_token) {
        debug('Saving refresh token');
        this.db.set(user, tokens).write();
      }
    });
    let tokens = this.db.get(user).value();

    if (tokens) {
      debug('User previously authorized, refreshing');
      oauth2Client.setCredentials(tokens);
      await oauth2Client.getAccessToken();
      return oauth2Client;
    }

    debug('Challenging for authorization');
    /* eslint-disable @typescript-eslint/camelcase */

    const authUrl = oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: scopes,
      login_hint: user
    });
    let code = await this.prompt(authUrl);
    let tokenResponse = await oauth2Client.getToken(code);
    oauth2Client.setCredentials(tokenResponse.tokens);
    return oauth2Client;
  }
  /**
   * Initialzes the token database.
   *
   * @param {String} filePath Path to database, null if use in-memory DB only.
   * @returns {lowdb} database instance
   * @private
   */


  initDbSync(filePath) {
    let adapter;

    if (filePath) {
      const parentDir = _path.default.dirname(filePath);

      _mkdirp.default.sync(parentDir);

      adapter = new _FileSync.default(filePath);
    } else {
      adapter = new _Memory.default('');
    }

    return (0, _lowdb.default)(adapter);
  }

}

exports.default = UserAuthorizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=auth.js.map