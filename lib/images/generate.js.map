{"version":3,"sources":["../../src/images/generate.ts"],"names":["debug","renderers","svg","renderSVG","math","renderMathJax","maybeGenerateImage","image","url","filePath","imageType","type","trim","toLowerCase","renderer","undefined","source"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,MAAMA,KAAK,GAAG,oBAAM,YAAN,CAAd;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,GAAG,EAAEC,YADO;AAEZC,EAAAA,IAAI,EAAEC;AAFM,CAAhB;AAKA;AACA;AACA;AACA;AACA;;AACA,eAAeC,kBAAf,CAAkCC,KAAlC,EAAoF;AAChF,MAAIA,KAAK,CAACC,GAAV,EAAe;AACXR,IAAAA,KAAK,CAAC,8BAAD,EAAiCO,KAAK,CAACC,GAAvC,CAAL;AACA,WAAOD,KAAP;AACH;;AAED,MAAIE,QAAJ;AACA,MAAIC,SAAS,GAAGH,KAAK,CAACI,IAAN,CAAWC,IAAX,GAAkBC,WAAlB,EAAhB;AAEA,MAAIC,QAAQ,GAAGb,SAAS,CAACS,SAAD,CAAxB;;AACA,MAAII,QAAQ,KAAKC,SAAjB,EAA4B;AACxB,UAAM,kCAAkCR,KAAK,CAACS,MAA9C;AACH;;AACDP,EAAAA,QAAQ,GAAG,MAAMK,QAAQ,CAACP,KAAD,CAAzB;AACAA,EAAAA,KAAK,CAACC,GAAN,GAAY,YAAYC,QAAxB;AACAT,EAAAA,KAAK,CAAC,sBAAD,EAAyBO,KAAK,CAACC,GAA/B,CAAL;AACA,SAAOD,KAAP;AACH;;eAEcD,kB","sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Debug from 'debug';\nimport renderSVG from './svg';\nimport renderMathJax from './/mathjax';\nimport { ImageDefinition } from '../slides';\n\nconst debug = Debug('md2gslides');\n\nlet renderers = {\n    svg: renderSVG,\n    math: renderMathJax,\n};\n\n/**\n * Checks to see if the image requires rasterization (e.g. SVG, MathJAX, etc)\n * @param {Image} image to generate if needed\n * @return {Promise<Image>} Promise resolved with image URL\n */\nasync function maybeGenerateImage(image: ImageDefinition): Promise<ImageDefinition> {\n    if (image.url) {\n        debug('Image already rasterized: %s', image.url);\n        return image;\n    }\n\n    let filePath: string;\n    let imageType = image.type.trim().toLowerCase();\n\n    let renderer = renderers[imageType];\n    if (renderer === undefined) {\n        throw 'Unsupported generated image: ' + image.source;\n    }\n    filePath = await renderer(image);\n    image.url = 'file://' + filePath;\n    debug('Local image path: %s', image.url);\n    return image;\n}\n\nexport default maybeGenerateImage;\n"],"file":"generate.js"}