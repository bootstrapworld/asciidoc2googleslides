"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _probeImageSize = _interopRequireDefault(require("probe-image-size"));

var _promiseRetry = _interopRequireDefault(require("promise-retry"));

var _fs = _interopRequireDefault(require("fs"));

var _url = require("url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2019 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const debug = (0, _debug.default)('md2gslides');
const retriableCodes = ['ENOTFOUND', 'ECONNRESET', 'ETIMEDOUT'];
const probeOptions = {
  timeout: 5000
};
const retryOptions = {
  retries: 3,
  randomize: true
};

async function probeUrl(url) {
  return await (0, _promiseRetry.default)(async doRetry => {
    try {
      return await (0, _probeImageSize.default)(url, probeOptions);
    } catch (err) {
      if (retriableCodes.includes(err.code)) {
        doRetry(err);
      }

      throw err;
    }
  }, retryOptions);
}

async function probeFile(path) {
  let stream = _fs.default.createReadStream(path);

  try {
    return await (0, _probeImageSize.default)(stream);
  } finally {
    stream.destroy();
  }
}

async function probeImage(image) {
  debug('Probing image size: %s', image.url);
  let promise;
  let parsedUrl = new _url.URL(image.url);

  if (parsedUrl.protocol == 'file:') {
    promise = probeFile(parsedUrl.pathname);
  } else {
    promise = probeUrl(image.url);
  }

  let size = await promise;
  image.width = size.width;
  image.height = size.height;
  return image;
}

var _default = probeImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbWFnZXMvcHJvYmUudHMiXSwibmFtZXMiOlsiZGVidWciLCJyZXRyaWFibGVDb2RlcyIsInByb2JlT3B0aW9ucyIsInRpbWVvdXQiLCJyZXRyeU9wdGlvbnMiLCJyZXRyaWVzIiwicmFuZG9taXplIiwicHJvYmVVcmwiLCJ1cmwiLCJkb1JldHJ5IiwiZXJyIiwiaW5jbHVkZXMiLCJjb2RlIiwicHJvYmVGaWxlIiwicGF0aCIsInN0cmVhbSIsImZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsImRlc3Ryb3kiLCJwcm9iZUltYWdlIiwiaW1hZ2UiLCJwcm9taXNlIiwicGFyc2VkVXJsIiwiVVJMIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0EsTUFBTUEsS0FBSyxHQUFHLG9CQUFNLFlBQU4sQ0FBZDtBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUFDLFdBQUQsRUFBYyxZQUFkLEVBQTRCLFdBQTVCLENBQXZCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHO0FBQUVDLEVBQUFBLE9BQU8sRUFBRTtBQUFYLENBQXJCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHO0FBQ2pCQyxFQUFBQSxPQUFPLEVBQUUsQ0FEUTtBQUVqQkMsRUFBQUEsU0FBUyxFQUFFO0FBRk0sQ0FBckI7O0FBVUEsZUFBZUMsUUFBZixDQUF3QkMsR0FBeEIsRUFBaUQ7QUFDN0MsU0FBTyxNQUFNLDJCQUFNLE1BQU1DLE9BQU4sSUFBaUI7QUFDaEMsUUFBSTtBQUNBLGFBQU8sTUFBTSw2QkFBZUQsR0FBZixFQUFvQk4sWUFBcEIsQ0FBYjtBQUNILEtBRkQsQ0FFRSxPQUFPUSxHQUFQLEVBQVk7QUFDVixVQUFJVCxjQUFjLENBQUNVLFFBQWYsQ0FBd0JELEdBQUcsQ0FBQ0UsSUFBNUIsQ0FBSixFQUF1QztBQUNuQ0gsUUFBQUEsT0FBTyxDQUFDQyxHQUFELENBQVA7QUFDSDs7QUFDRCxZQUFNQSxHQUFOO0FBQ0g7QUFDSixHQVRZLEVBU1ZOLFlBVFUsQ0FBYjtBQVVIOztBQUVELGVBQWVTLFNBQWYsQ0FBeUJDLElBQXpCLEVBQW1EO0FBQy9DLE1BQUlDLE1BQU0sR0FBR0MsWUFBR0MsZ0JBQUgsQ0FBb0JILElBQXBCLENBQWI7O0FBQ0EsTUFBSTtBQUNBLFdBQU8sTUFBTSw2QkFBZUMsTUFBZixDQUFiO0FBQ0gsR0FGRCxTQUVVO0FBQ05BLElBQUFBLE1BQU0sQ0FBQ0csT0FBUDtBQUNIO0FBQ0o7O0FBRUQsZUFBZUMsVUFBZixDQUEwQkMsS0FBMUIsRUFBNEU7QUFDeEVwQixFQUFBQSxLQUFLLENBQUMsd0JBQUQsRUFBMkJvQixLQUFLLENBQUNaLEdBQWpDLENBQUw7QUFDQSxNQUFJYSxPQUFKO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLElBQUlDLFFBQUosQ0FBUUgsS0FBSyxDQUFDWixHQUFkLENBQWhCOztBQUNBLE1BQUljLFNBQVMsQ0FBQ0UsUUFBVixJQUFzQixPQUExQixFQUFtQztBQUMvQkgsSUFBQUEsT0FBTyxHQUFHUixTQUFTLENBQUNTLFNBQVMsQ0FBQ0csUUFBWCxDQUFuQjtBQUNILEdBRkQsTUFFTztBQUNISixJQUFBQSxPQUFPLEdBQUdkLFFBQVEsQ0FBQ2EsS0FBSyxDQUFDWixHQUFQLENBQWxCO0FBQ0g7O0FBRUQsTUFBSWtCLElBQUksR0FBRyxNQUFNTCxPQUFqQjtBQUNBRCxFQUFBQSxLQUFLLENBQUNPLEtBQU4sR0FBY0QsSUFBSSxDQUFDQyxLQUFuQjtBQUNBUCxFQUFBQSxLQUFLLENBQUNRLE1BQU4sR0FBZUYsSUFBSSxDQUFDRSxNQUFwQjtBQUNBLFNBQU9SLEtBQVA7QUFDSDs7ZUFFY0QsVSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcHJvYmVJbWFnZVNpemUgZnJvbSAncHJvYmUtaW1hZ2Utc2l6ZSc7XG5pbXBvcnQgeyBJbWFnZURlZmluaXRpb24gfSBmcm9tICcuLi9zbGlkZXMnO1xuaW1wb3J0IHJldHJ5IGZyb20gJ3Byb21pc2UtcmV0cnknO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5cbmNvbnN0IGRlYnVnID0gRGVidWcoJ21kMmdzbGlkZXMnKTtcbmNvbnN0IHJldHJpYWJsZUNvZGVzID0gWydFTk9URk9VTkQnLCAnRUNPTk5SRVNFVCcsICdFVElNRURPVVQnXTtcbmNvbnN0IHByb2JlT3B0aW9ucyA9IHsgdGltZW91dDogNTAwMCB9O1xuY29uc3QgcmV0cnlPcHRpb25zID0ge1xuICAgIHJldHJpZXM6IDMsXG4gICAgcmFuZG9taXplOiB0cnVlLFxufTtcblxuaW50ZXJmYWNlIEltYWdlU2l6ZSB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvYmVVcmwodXJsKTogUHJvbWlzZTxJbWFnZVNpemU+IHtcbiAgICByZXR1cm4gYXdhaXQgcmV0cnkoYXN5bmMgZG9SZXRyeSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvYmVJbWFnZVNpemUodXJsLCBwcm9iZU9wdGlvbnMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChyZXRyaWFibGVDb2Rlcy5pbmNsdWRlcyhlcnIuY29kZSkpIHtcbiAgICAgICAgICAgICAgICBkb1JldHJ5KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9LCByZXRyeU9wdGlvbnMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcm9iZUZpbGUocGF0aCk6IFByb21pc2U8SW1hZ2VTaXplPiB7XG4gICAgbGV0IHN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHByb2JlSW1hZ2VTaXplKHN0cmVhbSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2JlSW1hZ2UoaW1hZ2U6IEltYWdlRGVmaW5pdGlvbik6IFByb21pc2U8SW1hZ2VEZWZpbml0aW9uPiB7XG4gICAgZGVidWcoJ1Byb2JpbmcgaW1hZ2Ugc2l6ZTogJXMnLCBpbWFnZS51cmwpO1xuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBwYXJzZWRVcmwgPSBuZXcgVVJMKGltYWdlLnVybCk7XG4gICAgaWYgKHBhcnNlZFVybC5wcm90b2NvbCA9PSAnZmlsZTonKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9iZUZpbGUocGFyc2VkVXJsLnBhdGhuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gcHJvYmVVcmwoaW1hZ2UudXJsKTtcbiAgICB9XG5cbiAgICBsZXQgc2l6ZSA9IGF3YWl0IHByb21pc2U7XG4gICAgaW1hZ2Uud2lkdGggPSBzaXplLndpZHRoO1xuICAgIGltYWdlLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgIHJldHVybiBpbWFnZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJvYmVJbWFnZTtcbiJdfQ==
//# sourceMappingURL=probe.js.map