{"version":3,"sources":["../src/slide_generator.ts"],"names":["debug","SlideGenerator","constructor","api","presentation","newPresentation","oauth2Client","title","google","slides","version","auth","res","presentations","create","requestBody","data","copyPresentation","presentationId","drive","files","copy","fileId","name","forPresentation","id","get","generateFromMarkdown","markdown","css","useFileio","allowUpload","generateImages","probeImageSizes","uploadLocalImages","updatePresentation","createSlides","reloadPresentation","populateSlides","erase","Promise","resolve","requests","map","slide","deleteObject","objectId","batch","batchUpdate","processImages","fn","promises","backgroundImage","push","body","bodies","image","images","all","maybeGenerateImage","uploadImageifLocal","parsedUrl","URL","url","protocol","reject","pathname","probeImage","layout","appendCreateSlideRequest","appendContentRequests","length"],"mappings":"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","sourcesContent":["// Copyright 2016 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Debug from 'debug';\nimport extractSlides from './parser/extract_slides';\nimport { SlideDefinition, ImageDefinition } from './slides';\nimport matchLayout from './layout/match_layout';\nimport { URL } from 'url';\nimport { google, slides_v1 as SlidesV1 } from 'googleapis';\nimport uploadLocalImage from './images/upload';\nimport { OAuth2Client } from 'google-auth-library';\nimport probeImage from './images/probe';\nimport maybeGenerateImage from './images/generate';\n\nconst debug = Debug('md2gslides');\n\n/**\n * Generates slides from Markdown or HTML. Requires an authorized\n * oauth2 client.\n *\n * @example\n *\n *   var SlideGenerator = require('md2slides');\n *   var fs = require('fs');\n *\n *   var oauth2Client = ...; // See Google API client for details\n *   var generator = SlideGenerator.newPresentation(oauth2Client);\n *   var markdown = fs.readFileSync('mydeck.md');\n *   generator.generateFromMarkdown(markdown).then(function(id) {\n *     console.log(\"Presentation ID: \" + id);\n *   });\n *\n * @see https://github.com/google/google-api-nodejs-client\n */\nexport default class SlideGenerator {\n    private slides: SlideDefinition[];\n    private api: SlidesV1.Slides;\n    private presentation: SlidesV1.Schema$Presentation;\n    private allowUpload = false;\n    /**\n     * @param {Object} api Authorized API client instance\n     * @param {Object} presentation Initial presentation data\n     * @private\n     */\n    public constructor(api: SlidesV1.Slides, presentation: SlidesV1.Schema$Presentation) {\n        this.api = api;\n        this.presentation = presentation;\n    }\n\n    /**\n     * Returns a generator that writes to a new blank presentation.\n     *\n     * @param {OAuth2Client} oauth2Client User credentials\n     * @param {string} title Title of presentation\n     * @returns {Promise.<SlideGenerator>}\n     */\n    public static async newPresentation(oauth2Client: OAuth2Client, title: string): Promise<SlideGenerator> {\n        let api = google.slides({ version: 'v1', auth: oauth2Client });\n        let res = await api.presentations.create({\n            requestBody: {\n                title: title,\n            },\n        });\n        let presentation = res.data;\n        return new SlideGenerator(api, presentation);\n    }\n\n    /**\n     * Returns a generator that copies an existing presentation.\n     *\n     * @param {OAuth2Client} oauth2Client User credentials\n     * @param {string} title Title of presentation\n     * @param {string} presentationId ID of presentation to copy\n     * @returns {Promise.<SlideGenerator>}\n     */\n    public static async copyPresentation(\n        oauth2Client: OAuth2Client,\n        title: string,\n        presentationId: string,\n    ): Promise<SlideGenerator> {\n        let drive = google.drive({ version: 'v3', auth: oauth2Client });\n        let res = await drive.files.copy({\n            fileId: presentationId,\n            requestBody: {\n                name: title,\n            },\n        });\n        return SlideGenerator.forPresentation(oauth2Client, res.data.id);\n    }\n\n    /**\n     * Returns a generator that writes to an existing presentation.\n     *\n     * @param {gOAuth2Client} oauth2Client User credentials\n     * @param {string} presentationId ID of presentation to use\n     * @returns {Promise.<SlideGenerator>}\n     */\n    public static async forPresentation(oauth2Client: OAuth2Client, presentationId): Promise<SlideGenerator> {\n        let api = google.slides({ version: 'v1', auth: oauth2Client });\n        let res = await api.presentations.get({ presentationId: presentationId });\n        let presentation = res.data;\n        return new SlideGenerator(api, presentation);\n    }\n\n    /**\n     * Generate slides from markdown\n     *\n     * @param {String} markdown Markdown to import\n     * @returns {Promise.<String>} ID of generated slide\n     */\n    public async generateFromMarkdown(markdown, { css, useFileio }): Promise<string> {\n        this.slides = extractSlides(markdown, css);\n        this.allowUpload = useFileio;\n        await this.generateImages();\n        await this.probeImageSizes();\n        await this.uploadLocalImages();\n        await this.updatePresentation(this.createSlides());\n        await this.reloadPresentation();\n        await this.updatePresentation(this.populateSlides());\n        return this.presentation.presentationId;\n    }\n\n    /**\n     * Removes any existing slides from the presentation.\n     *\n     * @returns {Promise.<*>}\n     */\n    public async erase(): Promise<void> {\n        debug('Erasing previous slides');\n        if (this.presentation.slides == null) {\n            return Promise.resolve(null);\n        }\n\n        let requests = this.presentation.slides.map(slide => ({\n            deleteObject: {\n                objectId: slide.objectId,\n            },\n        }));\n        const batch = { requests };\n        await this.api.presentations.batchUpdate({\n            presentationId: this.presentation.presentationId,\n            requestBody: batch,\n        });\n    }\n\n    protected async processImages<T>(fn: (img: ImageDefinition) => Promise<T>): Promise<void> {\n        const promises = [];\n        for (let slide of this.slides) {\n            if (slide.backgroundImage) {\n                promises.push(fn(slide.backgroundImage));\n            }\n            for (let body of slide.bodies) {\n                for (let image of body.images) {\n                    promises.push(fn(image));\n                }\n            }\n        }\n        await Promise.all(promises);\n    }\n    protected async generateImages(): Promise<void> {\n        return this.processImages(maybeGenerateImage);\n    }\n\n    protected async uploadLocalImages(): Promise<void> {\n        const uploadImageifLocal = async (image): Promise<void> => {\n            let parsedUrl = new URL(image.url);\n            if (parsedUrl.protocol !== 'file:') {\n                return;\n            }\n            if (!this.allowUpload) {\n                return Promise.reject('Local images require --use-fileio option');\n            }\n            image.url = await uploadLocalImage(parsedUrl.pathname);\n        };\n        return this.processImages(uploadImageifLocal);\n    }\n\n    /**\n     * Fetches the image sizes for each image in the presentation. Allows\n     * for more accurate layout of images.\n     *\n     * Image sizes are stored as data attributes on the image elements.\n     *\n     * @returns {Promise.<*>}\n     * @private\n     */\n    protected async probeImageSizes(): Promise<void> {\n        return this.processImages(probeImage);\n    }\n\n    /**\n     * 1st pass at generation -- creates slides using the apporpriate\n     * layout based on the content.\n     *\n     * Note this only returns the batch requests, but does not execute it.\n     *\n     * @returns {{requests: Array}}\n     */\n    protected createSlides(): SlidesV1.Schema$BatchUpdatePresentationRequest {\n        debug('Creating slides');\n        const batch = {\n            requests: [],\n        };\n        for (let slide of this.slides) {\n            const layout = matchLayout(this.presentation, slide);\n            layout.appendCreateSlideRequest(batch.requests);\n        }\n        return batch;\n    }\n\n    /**\n     * 2nd pass at generation -- fills in placeholders and adds any other\n     * elements to the slides.\n     *\n     * Note this only returns the batch requests, but does not execute it.\n     *\n     * @returns {{requests: Array}}\n     */\n    protected populateSlides(): SlidesV1.Schema$BatchUpdatePresentationRequest {\n        debug('Populating slides');\n        const batch = {\n            requests: [],\n        };\n        for (let slide of this.slides) {\n            const layout = matchLayout(this.presentation, slide);\n            layout.appendContentRequests(batch.requests);\n        }\n        return batch;\n    }\n\n    /**\n     * Updates the remote presentation.\n     *\n     * @param batch Batch of operations to execute\n     * @returns {Promise.<*>}\n     */\n    protected async updatePresentation(batch): Promise<void> {\n        debug('Updating presentation: %O', batch);\n        if (batch.requests.length == 0) {\n            return Promise.resolve(null);\n        }\n        let res = await this.api.presentations.batchUpdate({\n            presentationId: this.presentation.presentationId,\n            requestBody: batch,\n        });\n        debug('API response: %O', res.data);\n    }\n\n    /**\n     * Refreshes the local copy of the presentation.\n     *\n     * @returns {Promise.<*>}\n     */\n    protected async reloadPresentation(): Promise<void> {\n        let res = await this.api.presentations.get({\n            presentationId: this.presentation.presentationId,\n        });\n        this.presentation = res.data;\n    }\n}\n"],"file":"slide_generator.js"}