{"version":3,"sources":["../src/auth.ts"],"names":["debug","UserAuthorizer","constructor","options","db","initDbSync","filePath","clientId","clientSecret","prompt","getUserCredentials","user","scopes","oauth2Client","OAuth2Client","redirectUrl","on","tokens","refresh_token","set","write","get","value","setCredentials","getAccessToken","authUrl","generateAuthUrl","access_type","scope","login_hint","code","tokenResponse","getToken","adapter","parentDir","path","dirname","mkdirp","sync","FileSync","Memory"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,KAAK,GAAG,oBAAM,YAAN,CAAd;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,cAAN,CAAqB;AAOhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACWC,EAAAA,WAAP,CAAmBC,OAAnB,EAAyC;AAAA,yCAhBnB,2BAgBmB;;AAAA;;AAAA;;AAAA;;AAAA;;AACrC,SAAKC,EAAL,GAAU,KAAKC,UAAL,CAAgBF,OAAO,CAACG,QAAxB,CAAV;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACI,QAAxB;AACA,SAAKC,YAAL,GAAoBL,OAAO,CAACK,YAA5B;AACA,SAAKC,MAAL,GAAcN,OAAO,CAACM,MAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAaC,kBAAb,CAAgCC,IAAhC,EAA8CC,MAA9C,EAAqF;AACjF,UAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAiB,KAAKP,QAAtB,EAAgC,KAAKC,YAArC,EAAmD,KAAKO,WAAxD,CAArB;AACAF,IAAAA,YAAY,CAACG,EAAb,CAAgB,QAAhB,EAA2BC,MAAD,IAAyB;AAC/C,UAAIA,MAAM,CAACC,aAAX,EAA0B;AACtBlB,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACA,aAAKI,EAAL,CAAQe,GAAR,CAAYR,IAAZ,EAAkBM,MAAlB,EAA0BG,KAA1B;AACH;AACJ,KALD;AAOA,QAAIH,MAAM,GAAG,KAAKb,EAAL,CAAQiB,GAAR,CAAYV,IAAZ,EAAkBW,KAAlB,EAAb;;AACA,QAAIL,MAAJ,EAAY;AACRjB,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACAa,MAAAA,YAAY,CAACU,cAAb,CAA4BN,MAA5B;AACA,YAAMJ,YAAY,CAACW,cAAb,EAAN;AACA,aAAOX,YAAP;AACH;;AAEDb,IAAAA,KAAK,CAAC,+BAAD,CAAL;AACA;;AACA,UAAMyB,OAAO,GAAGZ,YAAY,CAACa,eAAb,CAA6B;AACzCC,MAAAA,WAAW,EAAE,SAD4B;AAEzCC,MAAAA,KAAK,EAAEhB,MAFkC;AAGzCiB,MAAAA,UAAU,EAAElB;AAH6B,KAA7B,CAAhB;AAKA,QAAImB,IAAI,GAAG,MAAM,KAAKrB,MAAL,CAAYgB,OAAZ,CAAjB;AACA,QAAIM,aAAa,GAAG,MAAMlB,YAAY,CAACmB,QAAb,CAAsBF,IAAtB,CAA1B;AACAjB,IAAAA,YAAY,CAACU,cAAb,CAA4BQ,aAAa,CAACd,MAA1C;AACA,WAAOJ,YAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACYR,EAAAA,UAAR,CAAsBC,QAAtB,EAA4D;AACxD,QAAI2B,OAAJ;;AACA,QAAI3B,QAAJ,EAAc;AACV,YAAM4B,SAAS,GAAGC,cAAKC,OAAL,CAAa9B,QAAb,CAAlB;;AACA+B,sBAAOC,IAAP,CAAYJ,SAAZ;;AACAD,MAAAA,OAAO,GAAG,IAAIM,iBAAJ,CAAgBjC,QAAhB,CAAV;AACH,KAJD,MAIO;AACH2B,MAAAA,OAAO,GAAG,IAAIO,eAAJ,CAAc,EAAd,CAAV;AACH;;AACD,WAAO,oBAAMP,OAAN,CAAP;AACH;;AAhF+B","sourcesContent":["// Copyright 2016 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Debug from 'debug';\nimport { OAuth2Client, Credentials } from 'google-auth-library';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport lowdb from 'lowdb';\nimport FileSync from 'lowdb/adapters/FileSync';\nimport Memory from 'lowdb/adapters/Memory';\n\nconst debug = Debug('md2gslides');\n\nexport type UserPrompt = (message: string) => Promise<string>;\n\nexport interface AuthOptions {\n    clientId: string;\n    clientSecret: string;\n    prompt: UserPrompt;\n    filePath?: string;\n}\n\n/**\n * Handles the authorization flow, intended for command line usage.\n *\n * @example\n *   var auth = new UserAuthorizer({\n *     clientId: 'my-client-id',\n *     clientSecret: 'my-client-secret',\n *     filePath: '/path/to/persistent/token/storage'\n *     prompt: function(url) { ... }\n *   });\n *\n *   var credentials = auth.getUserCredentials('user@example.com', 'https://www.googleapis.com/auth/slides');\n *   credentials.then(function(oauth2Client) {\n *     // Valid oauth2Client for use with google APIs.\n *   });\n *\n *   @callback UserAuthorizer-promptCallback\n *   @param {String} url Authorization URL to display to user or open in browser\n *   @returns {Promise.<String>} Promise yielding the authorization code\n */\nexport default class UserAuthorizer {\n    private redirectUrl = 'urn:ietf:wg:oauth:2.0:oob';\n    private db: lowdb.LowdbSync<Credentials>;\n    private clientId: string;\n    private clientSecret: string;\n    private prompt: UserPrompt;\n\n    /**\n     * Initialize the authorizer.\n     *\n     * This may block briefly to ensure the token file exists.\n     *\n     * @param {String} clientId Client ID\n     * @param {String} clientSecret Client secret\n     * @param {String} filePath Path to file where tokens are saved\n     * @param {UserAuthorizer~promptCallback} prompt Function to acquire the authorization code\n     */\n    public constructor(options: AuthOptions) {\n        this.db = this.initDbSync(options.filePath);\n        this.clientId = options.clientId;\n        this.clientSecret = options.clientSecret;\n        this.prompt = options.prompt;\n    }\n\n    /**\n     * Fetch credentials for the specified user.\n     *\n     * If no credentials are available, requests authorization.\n     *\n     * @param {String} user ID (email address) of user to get credentials for.\n     * @param {String} scopes Authorization scopes to request\n     * @returns {Promise.<google.auth.OAuth2>}\n     */\n    public async getUserCredentials(user: string, scopes: string): Promise<OAuth2Client> {\n        const oauth2Client = new OAuth2Client(this.clientId, this.clientSecret, this.redirectUrl);\n        oauth2Client.on('tokens', (tokens: Credentials) => {\n            if (tokens.refresh_token) {\n                debug('Saving refresh token');\n                this.db.set(user, tokens).write();\n            }\n        });\n\n        let tokens = this.db.get(user).value();\n        if (tokens) {\n            debug('User previously authorized, refreshing');\n            oauth2Client.setCredentials(tokens);\n            await oauth2Client.getAccessToken();\n            return oauth2Client;\n        }\n\n        debug('Challenging for authorization');\n        /* eslint-disable @typescript-eslint/camelcase */\n        const authUrl = oauth2Client.generateAuthUrl({\n            access_type: 'offline',\n            scope: scopes,\n            login_hint: user,\n        });\n        let code = await this.prompt(authUrl);\n        let tokenResponse = await oauth2Client.getToken(code);\n        oauth2Client.setCredentials(tokenResponse.tokens);\n        return oauth2Client;\n    }\n\n    /**\n     * Initialzes the token database.\n     *\n     * @param {String} filePath Path to database, null if use in-memory DB only.\n     * @returns {lowdb} database instance\n     * @private\n     */\n    private initDbSync<T>(filePath: string): lowdb.LowdbSync<T> {\n        let adapter: lowdb.AdapterSync;\n        if (filePath) {\n            const parentDir = path.dirname(filePath);\n            mkdirp.sync(parentDir);\n            adapter = new FileSync<T>(filePath);\n        } else {\n            adapter = new Memory<T>('');\n        }\n        return lowdb(adapter);\n    }\n}\n"],"file":"auth.js"}