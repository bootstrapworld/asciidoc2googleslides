"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findPage = findPage;
exports.pageSize = pageSize;
exports.findLayoutIdByName = findLayoutIdByName;
exports.findPlaceholder = findPlaceholder;
exports.findPageElement = findPageElement;
exports.findSpeakerNotesObjectId = findSpeakerNotesObjectId;

// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Locates a page by ID
 *
 * @param {string} pageId Object ID of page to find
 * @returns {Object} Page or null if not found
 */
function findPage(presentation, pageId) {
  if (!presentation.slides) {
    return undefined;
  }

  return presentation.slides.find(p => p.objectId === pageId);
}

function pageSize(presentation) {
  return {
    width: presentation.pageSize.width.magnitude,
    height: presentation.pageSize.height.magnitude
  };
}
/**
 * Locates a layout.
 *
 * @param {string} name
 * @returns {string} layout ID or null if not found
 */


function findLayoutIdByName(presentation, name) {
  if (!presentation.layouts) {
    return undefined;
  }

  const layout = presentation.layouts.find(l => l.layoutProperties.name === name);

  if (!layout) {
    return undefined;
  }

  return layout.objectId;
}
/**
 * Find a named placeholder on the page.
 *
 * @param {string} pageId Object ID of page to find element on
 * @param name Placeholder name.
 * @returns {Array} Array of placeholders
 */


function findPlaceholder(presentation, pageId, name) {
  const page = findPage(presentation, pageId);

  if (!page) {
    throw new Error(`Can't find page ${pageId}`);
  }

  let placeholders = [];

  if (!page.pageElements) {
    return undefined;
  }

  for (let element of page.pageElements) {
    if (element.shape && element.shape.placeholder && name == element.shape.placeholder.type) {
      placeholders.push(element);
    }
  }

  if (placeholders.length) {
    return placeholders;
  }

  return undefined;
}
/**
 * Locates a element on a page by ID.
 *
 * @param {string} pageId Object ID of page to find element on
 * @returns {Object} Object or null if not found
 */


function findPageElement(presentation, pageId, id) {
  const page = findPage(presentation, pageId);

  if (!page) {
    throw new Error(`Can't find page ${pageId}`);
  }

  for (let element of page.pageElements) {
    if (element.objectId == id) {
      return element;
    }
  }

  return undefined;
}

function findSpeakerNotesObjectId(presentation, pageId) {
  let page = findPage(presentation, pageId);

  if (page) {
    return page.slideProperties.notesPage.notesProperties.speakerNotesObjectId;
  }

  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXlvdXQvcHJlc2VudGF0aW9uX2hlbHBlcnMudHMiXSwibmFtZXMiOlsiZmluZFBhZ2UiLCJwcmVzZW50YXRpb24iLCJwYWdlSWQiLCJzbGlkZXMiLCJ1bmRlZmluZWQiLCJmaW5kIiwicCIsIm9iamVjdElkIiwicGFnZVNpemUiLCJ3aWR0aCIsIm1hZ25pdHVkZSIsImhlaWdodCIsImZpbmRMYXlvdXRJZEJ5TmFtZSIsIm5hbWUiLCJsYXlvdXRzIiwibGF5b3V0IiwibCIsImxheW91dFByb3BlcnRpZXMiLCJmaW5kUGxhY2Vob2xkZXIiLCJwYWdlIiwiRXJyb3IiLCJwbGFjZWhvbGRlcnMiLCJwYWdlRWxlbWVudHMiLCJlbGVtZW50Iiwic2hhcGUiLCJwbGFjZWhvbGRlciIsInR5cGUiLCJwdXNoIiwibGVuZ3RoIiwiZmluZFBhZ2VFbGVtZW50IiwiaWQiLCJmaW5kU3BlYWtlck5vdGVzT2JqZWN0SWQiLCJzbGlkZVByb3BlcnRpZXMiLCJub3Rlc1BhZ2UiLCJub3Rlc1Byb3BlcnRpZXMiLCJzcGVha2VyTm90ZXNPYmplY3RJZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsUUFBVCxDQUFrQkMsWUFBbEIsRUFBOERDLE1BQTlELEVBQWdIO0FBQ25ILE1BQUksQ0FBQ0QsWUFBWSxDQUFDRSxNQUFsQixFQUEwQjtBQUN0QixXQUFPQyxTQUFQO0FBQ0g7O0FBQ0QsU0FBT0gsWUFBWSxDQUFDRSxNQUFiLENBQW9CRSxJQUFwQixDQUEwQkMsQ0FBRCxJQUFnQkEsQ0FBQyxDQUFDQyxRQUFGLEtBQWVMLE1BQXhELENBQVA7QUFDSDs7QUFFTSxTQUFTTSxRQUFULENBQWtCUCxZQUFsQixFQUEwRTtBQUM3RSxTQUFPO0FBQ0hRLElBQUFBLEtBQUssRUFBRVIsWUFBWSxDQUFDTyxRQUFiLENBQXNCQyxLQUF0QixDQUE0QkMsU0FEaEM7QUFFSEMsSUFBQUEsTUFBTSxFQUFFVixZQUFZLENBQUNPLFFBQWIsQ0FBc0JHLE1BQXRCLENBQTZCRDtBQUZsQyxHQUFQO0FBSUg7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNFLGtCQUFULENBQTRCWCxZQUE1QixFQUF3RVksSUFBeEUsRUFBMEc7QUFDN0csTUFBSSxDQUFDWixZQUFZLENBQUNhLE9BQWxCLEVBQTJCO0FBQ3ZCLFdBQU9WLFNBQVA7QUFDSDs7QUFDRCxRQUFNVyxNQUFNLEdBQUdkLFlBQVksQ0FBQ2EsT0FBYixDQUFxQlQsSUFBckIsQ0FBMkJXLENBQUQsSUFBZ0JBLENBQUMsQ0FBQ0MsZ0JBQUYsQ0FBbUJKLElBQW5CLEtBQTRCQSxJQUF0RSxDQUFmOztBQUNBLE1BQUksQ0FBQ0UsTUFBTCxFQUFhO0FBQ1QsV0FBT1gsU0FBUDtBQUNIOztBQUNELFNBQU9XLE1BQU0sQ0FBQ1IsUUFBZDtBQUNIO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNXLGVBQVQsQ0FDSGpCLFlBREcsRUFFSEMsTUFGRyxFQUdIVyxJQUhHLEVBSXNDO0FBQ3pDLFFBQU1NLElBQUksR0FBR25CLFFBQVEsQ0FBQ0MsWUFBRCxFQUFlQyxNQUFmLENBQXJCOztBQUNBLE1BQUksQ0FBQ2lCLElBQUwsRUFBVztBQUNQLFVBQU0sSUFBSUMsS0FBSixDQUFXLG1CQUFrQmxCLE1BQU8sRUFBcEMsQ0FBTjtBQUNIOztBQUVELE1BQUltQixZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsTUFBSSxDQUFDRixJQUFJLENBQUNHLFlBQVYsRUFBd0I7QUFDcEIsV0FBT2xCLFNBQVA7QUFDSDs7QUFFRCxPQUFLLElBQUltQixPQUFULElBQW9CSixJQUFJLENBQUNHLFlBQXpCLEVBQXVDO0FBQ25DLFFBQUlDLE9BQU8sQ0FBQ0MsS0FBUixJQUFpQkQsT0FBTyxDQUFDQyxLQUFSLENBQWNDLFdBQS9CLElBQThDWixJQUFJLElBQUlVLE9BQU8sQ0FBQ0MsS0FBUixDQUFjQyxXQUFkLENBQTBCQyxJQUFwRixFQUEwRjtBQUN0RkwsTUFBQUEsWUFBWSxDQUFDTSxJQUFiLENBQWtCSixPQUFsQjtBQUNIO0FBQ0o7O0FBRUQsTUFBSUYsWUFBWSxDQUFDTyxNQUFqQixFQUF5QjtBQUNyQixXQUFPUCxZQUFQO0FBQ0g7O0FBRUQsU0FBT2pCLFNBQVA7QUFDSDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU3lCLGVBQVQsQ0FDSDVCLFlBREcsRUFFSEMsTUFGRyxFQUdINEIsRUFIRyxFQUlvQztBQUN2QyxRQUFNWCxJQUFJLEdBQUduQixRQUFRLENBQUNDLFlBQUQsRUFBZUMsTUFBZixDQUFyQjs7QUFDQSxNQUFJLENBQUNpQixJQUFMLEVBQVc7QUFDUCxVQUFNLElBQUlDLEtBQUosQ0FBVyxtQkFBa0JsQixNQUFPLEVBQXBDLENBQU47QUFDSDs7QUFFRCxPQUFLLElBQUlxQixPQUFULElBQW9CSixJQUFJLENBQUNHLFlBQXpCLEVBQXVDO0FBQ25DLFFBQUlDLE9BQU8sQ0FBQ2hCLFFBQVIsSUFBb0J1QixFQUF4QixFQUE0QjtBQUN4QixhQUFPUCxPQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPbkIsU0FBUDtBQUNIOztBQUVNLFNBQVMyQix3QkFBVCxDQUNIOUIsWUFERyxFQUVIQyxNQUZHLEVBR2U7QUFDbEIsTUFBSWlCLElBQUksR0FBR25CLFFBQVEsQ0FBQ0MsWUFBRCxFQUFlQyxNQUFmLENBQW5COztBQUNBLE1BQUlpQixJQUFKLEVBQVU7QUFDTixXQUFPQSxJQUFJLENBQUNhLGVBQUwsQ0FBcUJDLFNBQXJCLENBQStCQyxlQUEvQixDQUErQ0Msb0JBQXREO0FBQ0g7O0FBQ0QsU0FBTy9CLFNBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHNsaWRlc192MSBhcyBTbGlkZXNWMSB9IGZyb20gJ2dvb2dsZWFwaXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvbnMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbi8qKlxuICogTG9jYXRlcyBhIHBhZ2UgYnkgSURcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFnZUlkIE9iamVjdCBJRCBvZiBwYWdlIHRvIGZpbmRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZ2Ugb3IgbnVsbCBpZiBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYWdlKHByZXNlbnRhdGlvbjogU2xpZGVzVjEuU2NoZW1hJFByZXNlbnRhdGlvbiwgcGFnZUlkOiBzdHJpbmcpOiBTbGlkZXNWMS5TY2hlbWEkUGFnZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFwcmVzZW50YXRpb24uc2xpZGVzKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBwcmVzZW50YXRpb24uc2xpZGVzLmZpbmQoKHApOiBib29sZWFuID0+IHAub2JqZWN0SWQgPT09IHBhZ2VJZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlU2l6ZShwcmVzZW50YXRpb246IFNsaWRlc1YxLlNjaGVtYSRQcmVzZW50YXRpb24pOiBEaW1lbnNpb25zIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogcHJlc2VudGF0aW9uLnBhZ2VTaXplLndpZHRoLm1hZ25pdHVkZSxcbiAgICAgICAgaGVpZ2h0OiBwcmVzZW50YXRpb24ucGFnZVNpemUuaGVpZ2h0Lm1hZ25pdHVkZSxcbiAgICB9O1xufVxuXG4vKipcbiAqIExvY2F0ZXMgYSBsYXlvdXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGxheW91dCBJRCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZExheW91dElkQnlOYW1lKHByZXNlbnRhdGlvbjogU2xpZGVzVjEuU2NoZW1hJFByZXNlbnRhdGlvbiwgbmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIXByZXNlbnRhdGlvbi5sYXlvdXRzKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGxheW91dCA9IHByZXNlbnRhdGlvbi5sYXlvdXRzLmZpbmQoKGwpOiBib29sZWFuID0+IGwubGF5b3V0UHJvcGVydGllcy5uYW1lID09PSBuYW1lKTtcbiAgICBpZiAoIWxheW91dCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0Lm9iamVjdElkO1xufVxuXG4vKipcbiAqIEZpbmQgYSBuYW1lZCBwbGFjZWhvbGRlciBvbiB0aGUgcGFnZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFnZUlkIE9iamVjdCBJRCBvZiBwYWdlIHRvIGZpbmQgZWxlbWVudCBvblxuICogQHBhcmFtIG5hbWUgUGxhY2Vob2xkZXIgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgcGxhY2Vob2xkZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGxhY2Vob2xkZXIoXG4gICAgcHJlc2VudGF0aW9uOiBTbGlkZXNWMS5TY2hlbWEkUHJlc2VudGF0aW9uLFxuICAgIHBhZ2VJZDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbik6IFNsaWRlc1YxLlNjaGVtYSRQYWdlRWxlbWVudFtdIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBwYWdlID0gZmluZFBhZ2UocHJlc2VudGF0aW9uLCBwYWdlSWQpO1xuICAgIGlmICghcGFnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGZpbmQgcGFnZSAke3BhZ2VJZH1gKTtcbiAgICB9XG5cbiAgICBsZXQgcGxhY2Vob2xkZXJzID0gW107XG4gICAgaWYgKCFwYWdlLnBhZ2VFbGVtZW50cykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZvciAobGV0IGVsZW1lbnQgb2YgcGFnZS5wYWdlRWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc2hhcGUgJiYgZWxlbWVudC5zaGFwZS5wbGFjZWhvbGRlciAmJiBuYW1lID09IGVsZW1lbnQuc2hhcGUucGxhY2Vob2xkZXIudHlwZSkge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGxhY2Vob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXJzO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogTG9jYXRlcyBhIGVsZW1lbnQgb24gYSBwYWdlIGJ5IElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWdlSWQgT2JqZWN0IElEIG9mIHBhZ2UgdG8gZmluZCBlbGVtZW50IG9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3Qgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYWdlRWxlbWVudChcbiAgICBwcmVzZW50YXRpb246IFNsaWRlc1YxLlNjaGVtYSRQcmVzZW50YXRpb24sXG4gICAgcGFnZUlkOiBzdHJpbmcsXG4gICAgaWQ6IHN0cmluZyxcbik6IFNsaWRlc1YxLlNjaGVtYSRQYWdlRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgcGFnZSA9IGZpbmRQYWdlKHByZXNlbnRhdGlvbiwgcGFnZUlkKTtcbiAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBmaW5kIHBhZ2UgJHtwYWdlSWR9YCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgZWxlbWVudCBvZiBwYWdlLnBhZ2VFbGVtZW50cykge1xuICAgICAgICBpZiAoZWxlbWVudC5vYmplY3RJZCA9PSBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTcGVha2VyTm90ZXNPYmplY3RJZChcbiAgICBwcmVzZW50YXRpb246IFNsaWRlc1YxLlNjaGVtYSRQcmVzZW50YXRpb24sXG4gICAgcGFnZUlkOiBzdHJpbmcsXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGxldCBwYWdlID0gZmluZFBhZ2UocHJlc2VudGF0aW9uLCBwYWdlSWQpO1xuICAgIGlmIChwYWdlKSB7XG4gICAgICAgIHJldHVybiBwYWdlLnNsaWRlUHJvcGVydGllcy5ub3Rlc1BhZ2Uubm90ZXNQcm9wZXJ0aWVzLnNwZWFrZXJOb3Rlc09iamVjdElkO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19
//# sourceMappingURL=presentation_helpers.js.map