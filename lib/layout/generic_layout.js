"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _utils = require("../utils");

var _extend = _interopRequireDefault(require("extend"));

var _layout = _interopRequireDefault(require("layout"));

var _ = _interopRequireWildcard(require("lodash"));

var _presentation_helpers = require("./presentation_helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug.default)('md2gslides');

/**
 * Performs most of the work of converting a slide into API requests.
 *
 */
class GenericLayout {
  constructor(name, presentation, slide) {
    _defineProperty(this, "name", void 0);

    _defineProperty(this, "presentation", void 0);

    _defineProperty(this, "slide", void 0);

    this.name = name;
    this.presentation = presentation;
    this.slide = slide;
  }

  appendCreateSlideRequest(requests) {
    const layoutId = (0, _presentation_helpers.findLayoutIdByName)(this.presentation, this.name);

    if (!layoutId) {
      throw new Error(`Unable to find layout ${this.name}`);
    }

    this.slide.objectId = (0, _utils.uuid)();
    debug('Creating slide %s with layout %s', this.slide.objectId, this.name);
    requests.push({
      createSlide: {
        slideLayoutReference: {
          layoutId: layoutId
        },
        objectId: this.slide.objectId
      }
    });
    return requests;
  }

  appendContentRequests(requests) {
    this.appendFillPlaceholderTextRequest(this.slide.title, 'TITLE', requests);
    this.appendFillPlaceholderTextRequest(this.slide.title, 'CENTERED_TITLE', requests);
    this.appendFillPlaceholderTextRequest(this.slide.subtitle, 'SUBTITLE', requests);

    if (this.slide.backgroundImage) {
      this.appendSetBackgroundImageRequest(this.slide.backgroundImage, requests);
    }

    if (this.slide.tables.length) {
      this.appendCreateTableRequests(this.slide.tables, requests);
    }

    if (this.slide.bodies) {
      const bodyElements = (0, _presentation_helpers.findPlaceholder)(this.presentation, this.slide.objectId, 'BODY');
      this.slide.bodies.forEach((body, index) => {
        let placeholder = bodyElements[index];
        this.appendFillPlaceholderTextRequest(body.text, placeholder, requests);

        if (body.images && body.images.length) {
          this.appendCreateImageRequests(body.images, placeholder, requests);
        }

        if (body.videos && body.videos.length) {
          this.appendCreateVideoRequests(body.videos, placeholder, requests);
        }
      });
    }

    if (this.slide.notes) {
      const objectId = (0, _presentation_helpers.findSpeakerNotesObjectId)(this.presentation, this.slide.objectId);
      this.appendInsertTextRequests(this.slide.notes, {
        objectId: objectId
      }, requests);
    }

    return requests;
  }

  appendFillPlaceholderTextRequest(value, placeholder, requests) {
    if (!value) {
      debug('No text for placeholder %s');
      return;
    }

    if (typeof placeholder === 'string') {
      const pageElements = (0, _presentation_helpers.findPlaceholder)(this.presentation, this.slide.objectId, placeholder);

      if (!pageElements) {
        debug('Skipping undefined placeholder %s', placeholder);
        return;
      }

      placeholder = pageElements[0];
    }

    this.appendInsertTextRequests(value, {
      objectId: placeholder.objectId
    }, requests);
  }

  appendInsertTextRequests(text, locationProps, requests) {
    // Insert the raw text first
    let request = {
      insertText: (0, _extend.default)({
        text: text.rawText
      }, locationProps)
    };
    requests.push(request); // Apply any text styles present.
    // Most of the work for generating the text runs
    // is performed when parsing markdown.

    for (let textRun of text.textRuns) {
      let request = {
        updateTextStyle: (0, _extend.default)({
          textRange: {
            type: 'FIXED_RANGE',
            startIndex: textRun.start,
            endIndex: textRun.end
          },
          style: {
            bold: textRun.bold,
            italic: textRun.italic,
            foregroundColor: textRun.foregroundColor,
            backgroundColor: textRun.backgroundColor,
            strikethrough: textRun.strikethrough,
            underline: textRun.underline,
            smallCaps: textRun.smallCaps,
            fontFamily: textRun.fontFamily,
            fontSize: textRun.fontSize,
            link: textRun.link,
            baselineOffset: textRun.baselineOffset
          }
        }, locationProps)
      };
      request.updateTextStyle.fields = this.computeShallowFieldMask(request.updateTextStyle.style);

      if (request.updateTextStyle.fields.length) {
        requests.push(request); // Only push if at least one style set
      }
    } // Convert paragraphs to lists.
    // Note that leading tabs for nested lists in the raw text are removed.
    // In this case, we're assuming that lists are supplied in order of
    // appearance and they're non-overlapping.
    // Processing in the reverse order avoids having to readjust indices.


    for (let listMarker of _.reverse(text.listMarkers)) {
      let request = {
        createParagraphBullets: (0, _extend.default)({
          textRange: {
            type: 'FIXED_RANGE',
            startIndex: listMarker.start,
            endIndex: listMarker.end
          },
          bulletPreset: listMarker.type == 'ordered' ? 'NUMBERED_DIGIT_ALPHA_ROMAN' : 'BULLET_DISC_CIRCLE_SQUARE'
        }, locationProps)
      };
      requests.push(request);
    }
  }

  appendSetBackgroundImageRequest(image, requests) {
    debug('Slide #%d: setting background image to %s', this.slide.index, image.url);
    requests.push({
      updatePageProperties: {
        objectId: this.slide.objectId,
        fields: 'pageBackgroundFill.stretchedPictureFill.contentUrl',
        pageProperties: {
          pageBackgroundFill: {
            stretchedPictureFill: {
              contentUrl: image.url
            }
          }
        }
      }
    });
  }

  appendCreateImageRequests(images, placeholder, requests) {
    // TODO - Fix weird cast
    const layer = (0, _layout.default)('left-right'); // TODO - Configurable?

    for (let image of images) {
      debug('Slide #%d: adding inline image %s', this.slide.index, image.url);
      layer.addItem({
        width: image.width + image.padding * 2,
        height: image.height + image.padding * 2,
        meta: image
      });
    }

    const box = this.getBodyBoundingBox(placeholder);
    const computedLayout = layer.export();
    let scaleRatio = Math.min(box.width / computedLayout.width, box.height / computedLayout.height);
    let scaledWidth = computedLayout.width * scaleRatio;
    let scaledHeight = computedLayout.height * scaleRatio;
    let baseTranslateX = box.x + (box.width - scaledWidth) / 2;
    let baseTranslateY = box.y + (box.height - scaledHeight) / 2;

    for (let item of computedLayout.items) {
      let itemOffsetX = item.meta.offsetX ? item.meta.offsetX : 0;
      let itemOffsetY = item.meta.offsetY ? item.meta.offsetY : 0;
      let itemPadding = item.meta.padding ? item.meta.padding : 0;
      let width = item.meta.width * scaleRatio;
      let height = item.meta.height * scaleRatio;
      let translateX = baseTranslateX + (item.x + itemPadding + itemOffsetX) * scaleRatio;
      let translateY = baseTranslateY + (item.y + itemPadding + itemOffsetY) * scaleRatio;
      requests.push({
        createImage: {
          elementProperties: {
            pageObjectId: this.slide.objectId,
            size: {
              height: {
                magnitude: height,
                unit: 'EMU'
              },
              width: {
                magnitude: width,
                unit: 'EMU'
              }
            },
            transform: {
              scaleX: 1,
              scaleY: 1,
              translateX: translateX,
              translateY: translateY,
              shearX: 0,
              shearY: 0,
              unit: 'EMU'
            }
          },
          url: item.meta.url
        }
      });
    }
  }

  appendCreateVideoRequests(videos, placeholder, requests) {
    if (videos.length > 1) {
      throw new Error('Multiple videos per slide are not supported.');
    }

    const video = videos[0];
    debug('Slide #%d: adding video %s', this.slide.index, video.id);
    const box = this.getBodyBoundingBox(placeholder);
    const scaleRatio = Math.min(box.width / video.width, box.height / video.height);
    const scaledWidth = video.width * scaleRatio;
    const scaledHeight = video.height * scaleRatio;
    let translateX = box.x + (box.width - scaledWidth) / 2;
    let translateY = box.y + (box.height - scaledHeight) / 2;
    const objectId = (0, _utils.uuid)();
    requests.push({
      createVideo: {
        source: 'YOUTUBE',
        objectId: objectId,
        id: video.id,
        elementProperties: {
          pageObjectId: this.slide.objectId,
          size: {
            height: {
              magnitude: scaledHeight,
              unit: 'EMU'
            },
            width: {
              magnitude: scaledWidth,
              unit: 'EMU'
            }
          },
          transform: {
            scaleX: 1,
            scaleY: 1,
            translateX: translateX,
            translateY: translateY,
            shearX: 0,
            shearY: 0,
            unit: 'EMU'
          }
        }
      }
    });
    requests.push({
      updateVideoProperties: {
        objectId: objectId,
        fields: 'autoPlay',
        videoProperties: {
          autoPlay: video.autoPlay
        }
      }
    });
  }

  appendCreateTableRequests(tables, requests) {
    if (tables.length > 1) {
      throw new Error('Multiple tables per slide are not supported.');
    }

    const table = tables[0];
    const tableId = (0, _utils.uuid)();
    requests.push({
      createTable: {
        objectId: tableId,
        elementProperties: {
          pageObjectId: this.slide.objectId // Use default size/transform for tables

        },
        rows: table.rows,
        columns: table.columns
      }
    });

    for (let r in table.cells) {
      let row = table.cells[r];

      for (let c in row) {
        this.appendInsertTextRequests(row[c], {
          objectId: tableId,
          cellLocation: {
            rowIndex: r,
            columnIndex: c
          }
        }, requests);
      }
    }
  }

  calculateBoundingBox(element) {
    const height = element.size.height.magnitude;
    const width = element.size.width.magnitude;
    const scaleX = element.transform.scaleX || 1;
    const scaleY = element.transform.scaleY || 1;
    const shearX = element.transform.shearX || 0;
    const shearY = element.transform.shearY || 0;
    return {
      width: scaleX * width + shearX * height,
      height: scaleY * height + shearY * width,
      x: element.transform.translateX,
      y: element.transform.translateY
    };
  }

  getBodyBoundingBox(placeholder) {
    if (placeholder) {
      return this.calculateBoundingBox(placeholder);
    }

    return {
      width: this.presentation.pageSize.width.magnitude,
      height: this.presentation.pageSize.height.magnitude,
      x: 0,
      y: 0
    };
  }

  computeShallowFieldMask(object) {
    const fields = [];

    for (var field of Object.keys(object)) {
      if (object[field] !== undefined) {
        fields.push(field);
      }
    }

    return fields.join(',');
  }

}

exports.default = GenericLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=generic_layout.js.map